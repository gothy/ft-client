// Generated by CoffeeScript 1.3.3
(function() {
  var ApiError, FTClient, NetworkError, base_url, fileCopy, fileDelete, fileMove, fileRename, fileUpload, folderContent, folderCopy, folderCreate, folderDelete, folderInfo, folderMove, folderRename, token, userInfo, userLogin, _do_file_upload, _file_method_helper, _fldr_ops, _folder_method_helper,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  base_url = 'http://filestrash.com/api/v1';

  token = null;

  ApiError = (function(_super) {

    __extends(ApiError, _super);

    function ApiError(message) {
      ApiError.__super__.constructor.call(this);
      this.name = 'ApiError';
      this.message = message;
    }

    return ApiError;

  })(Error);

  NetworkError = (function(_super) {

    __extends(NetworkError, _super);

    function NetworkError(message) {
      NetworkError.__super__.constructor.call(this);
      this.name = 'NetworkError';
      this.message = message;
    }

    return NetworkError;

  })(Error);

  userLogin = function(login, password, cb) {
    var _this = this;
    return $.ajax({
      url: "" + base_url + "/user/login",
      data: {
        login: login,
        password: password
      }
    }).done(function(data) {
      data = JSON.parse(data);
      if (data.status === 200) {
        token = data.response.token;
        if (cb && typeof cb === 'function') {
          return cb(null, data.response);
        }
      } else {
        if (cb && typeof cb === 'function') {
          return cb(new ApiError("" + data.status + ": " + data.details));
        }
      }
    }).fail(function(jqxhr, status) {
      if (cb && typeof cb === 'function') {
        return cb(new NetworkError("" + jqxhr.status + ": " + status));
      }
    });
  };

  userInfo = function(cb, params) {
    var _this = this;
    if (params == null) {
      params = {};
    }
    params.token = params.token || token;
    return $.ajax({
      url: "" + base_url + "/user/login",
      data: params
    }).done(function(data) {
      data = JSON.parse(data);
      if (data.status === 200) {
        if (cb && typeof cb === 'function') {
          return cb(null, data.response.user);
        }
      } else {
        if (cb && typeof cb === 'function') {
          return cb(new ApiError("" + data.status + ": " + data.details));
        }
      }
    }).fail(function(jqxhr, status) {
      if (cb && typeof cb === 'function') {
        return cb(new NetworkError("" + jqxhr.status + ": " + status));
      }
    });
  };

  fileUpload = function(params, file, cb, progress_cb) {
    var _this = this;
    params.token = params.token || token;
    return $.ajax({
      url: "" + base_url + "/file/upload",
      data: params
    }).done(function(data) {
      var response;
      data = JSON.parse(data);
      response = data.response;
      if (data.status === 200) {
        if (response.upload_url) {
          return _do_file_upload(params, file, response.upload_url, cb, progress_cb);
        } else {
          if (cb && typeof cb === 'function') {
            return cb(null, data.response.file);
          }
        }
      } else {
        if (cb && typeof cb === 'function') {
          return cb(new ApiError("" + data.status + ": " + data.details));
        }
      }
    }).fail(function(jqxhr, status) {
      if (cb && typeof cb === 'function') {
        return cb(new NetworkError("" + jqxhr.status + ": " + status));
      }
    });
  };

  _do_file_upload = function(params, file, upload_url, cb, progress_cb) {
    var form_data, upload_progress,
      _this = this;
    form_data = new FormData();
    form_data.append("file", file);
    form_data.append("token", params.token || token);
    upload_progress = function(event) {
      if (event.lengthComputable) {
        if (progress_cb && typeof progress_cb === 'function') {
          return progress_cb(Math.ceil(event.loaded / event.total * 100));
        }
      }
    };
    return $.ajax({
      url: upload_url,
      type: 'POST',
      data: form_data,
      cache: false,
      contentType: false,
      processData: false,
      xhr: function() {
        var myXhr;
        myXhr = $.ajaxSettings.xhr();
        if (myXhr.upload) {
          myXhr.upload.addEventListener('progress', upload_progress, false);
        }
        return myXhr;
      }
    }).done(function(data) {
      data = JSON.parse(data);
      console.log(data);
      if (data.status === 200) {
        if (cb && typeof cb === 'function') {
          return cb(null, data.response.file);
        }
      } else {
        if (cb && typeof cb === 'function') {
          return cb(new ApiError("" + data.status + ": " + data.details));
        }
      }
    }).fail(function(jqxhr, status) {
      if (cb && typeof cb === 'function') {
        return cb(new NetworkError("" + jqxhr.status + ": " + status));
      }
    });
  };

  _file_method_helper = function(method, params, cb) {
    var _this = this;
    params.token = params.token || token;
    return $.ajax({
      url: "" + base_url + "/file/" + method,
      data: params
    }).done(function(data) {
      var response, result, _ref, _ref1;
      data = JSON.parse(data);
      response = data.response;
      if (data.status === 200) {
        result = method === 'rename' ? data != null ? (_ref = data.response) != null ? _ref.file : void 0 : void 0 : data != null ? (_ref1 = data.response) != null ? _ref1.result : void 0 : void 0;
        if (cb && typeof cb === 'function') {
          return cb(null, result);
        }
      } else {
        if (cb && typeof cb === 'function') {
          return cb(new ApiError("" + (data != null ? data.status : void 0) + ": " + (data != null ? data.details : void 0)));
        }
      }
    }).fail(function(jqxhr, status) {
      if (cb && typeof cb === 'function') {
        return cb(new NetworkError("" + jqxhr.status + ": " + status));
      }
    });
  };

  fileRename = function(params, cb) {
    return _file_method_helper('rename', params, cb);
  };

  fileDelete = function(params, cb) {
    return _file_method_helper('delete', params, cb);
  };

  fileCopy = function(params, cb) {
    return _file_method_helper('copy', params, cb);
  };

  fileMove = function(params, cb) {
    return _file_method_helper('move', params, cb);
  };

  _fldr_ops = ['info', 'content', 'create', 'rename'];

  _folder_method_helper = function(method, params, cb) {
    var _this = this;
    params.token = params.token || token;
    return $.ajax({
      url: "" + base_url + "/folder/" + method,
      data: params
    }).done(function(data) {
      var response, result, _ref, _ref1;
      data = JSON.parse(data);
      response = data.response;
      if (data.status === 200) {
        if (__indexOf.call(_fldr_ops, method) >= 0) {
          result = data != null ? (_ref = data.response) != null ? _ref.folder : void 0 : void 0;
        } else {
          result = data != null ? (_ref1 = data.response) != null ? _ref1.result : void 0 : void 0;
        }
        if (cb && typeof cb === 'function') {
          return cb(null, result);
        }
      } else {
        if (cb && typeof cb === 'function') {
          return cb(new ApiError("" + (data != null ? data.status : void 0) + ": " + (data != null ? data.details : void 0)));
        }
      }
    }).fail(function(jqxhr, status) {
      if (cb && typeof cb === 'function') {
        return cb(new NetworkError("" + jqxhr.status + ": " + status));
      }
    });
  };

  folderInfo = function(params, cb) {
    return _folder_method_helper('info', params, cb);
  };

  folderContent = function(params, cb) {
    return _folder_method_helper('content', params, cb);
  };

  folderCreate = function(params, cb) {
    return _folder_method_helper('create', params, cb);
  };

  folderRename = function(params, cb) {
    return _folder_method_helper('rename', params, cb);
  };

  folderDelete = function(params, cb) {
    return _folder_method_helper('delete', params, cb);
  };

  folderCopy = function(params, cb) {
    return _folder_method_helper('copy', params, cb);
  };

  folderMove = function(params, cb) {
    return _folder_method_helper('move', params, cb);
  };

  window.FTClient = FTClient = {
    _setToken: function(newToken) {
      return token = newToken;
    },
    _setBaseUrl: function(newBaseUrl) {
      return base_url = newBaseUrl;
    },
    ApiError: ApiError,
    NetworkError: NetworkError,
    userLogin: userLogin,
    userInfo: userInfo,
    fileUpload: fileUpload,
    fileRename: fileRename,
    fileDelete: fileDelete,
    fileMove: fileMove,
    fileCopy: fileCopy
  };

}).call(this);
