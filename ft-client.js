// Generated by CoffeeScript 1.3.3
(function() {
  var ApiError, FTClient, NetworkError, base_url, fileCopy, fileDelete, fileMove, fileRename, fileUpload, folderContent, folderCopy, folderCreate, folderDelete, folderInfo, folderMove, folderRename, token, trashcanContent, trashcanEmpty, trashcanRestore, userInfo, userLogin, _do_file_upload, _fldr_ops, _item_method_helper,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  base_url = 'http://filestrash.com/api/v1';

  token = '';

  ApiError = (function(_super) {

    __extends(ApiError, _super);

    function ApiError(message) {
      ApiError.__super__.constructor.call(this);
      this.name = 'ApiError';
      this.message = message;
    }

    return ApiError;

  })(Error);

  NetworkError = (function(_super) {

    __extends(NetworkError, _super);

    function NetworkError(message) {
      NetworkError.__super__.constructor.call(this);
      this.name = 'NetworkError';
      this.message = message;
    }

    return NetworkError;

  })(Error);

  _do_file_upload = function(params, upload_url, cb) {
    var form_data, upload_progress, xhr,
      _this = this;
    form_data = new FormData();
    form_data.append("file", params.file);
    form_data.append("token", params.token || token);
    upload_progress = function(event) {
      if (event.lengthComputable) {
        if (params.progress_cb && typeof params.progress_cb === 'function') {
          return params.progress_cb(Math.ceil(event.loaded / event.total * 100));
        }
      }
    };
    xhr = new XMLHttpRequest();
    xhr.open("POST", upload_url, true);
    xhr.upload.onprogress = upload_progress;
    xhr.onreadystatechange = function() {
      var data, response;
      if (xhr.readyState === 4 && xhr.status === 200) {
        data = JSON.parse(xhr.responseText);
        response = data.response;
        if (data.status === 200) {
          if (cb && typeof cb === 'function') {
            return cb(null, data.response.file);
          }
        } else {
          if (cb && typeof cb === 'function') {
            return cb(new ApiError("" + data.status + ": " + data.details));
          }
        }
      } else if (xhr.readyState === 4 && xhr.status !== 200) {
        if (cb && typeof cb === 'function') {
          return cb(new NetworkError("" + xhr.status + ": " + status));
        }
      }
    };
    return xhr.send(form_data);
  };

  _fldr_ops = ['info', 'content', 'create', 'rename'];

  _item_method_helper = function(itype, method, params, cb) {
    var k, params_str, v, xhr;
    params.token = params.token || token;
    params_str = '';
    for (k in params) {
      v = params[k];
      if (typeof v !== 'function') {
        params_str += "" + k + "=" + (encodeURIComponent(v)) + "&";
      }
    }
    xhr = new XMLHttpRequest();
    xhr.open("GET", "" + base_url + "/" + itype + "/" + method + "?" + params_str, true);
    xhr.onreadystatechange = function() {
      var data, response, result, twolevel, _ref, _ref1, _ref2, _ref3;
      if (xhr.readyState === 4 && xhr.status === 200) {
        data = JSON.parse(xhr.responseText);
        response = data.response;
        if (data.status === 200) {
          twolevel = false;
          if (itype === 'file' && method === 'upload') {
            if (data.response.upload_url) {
              _do_file_upload(params, data.response.upload_url, cb);
              twolevel = true;
            } else {
              result = data != null ? (_ref = data.response) != null ? _ref.file : void 0 : void 0;
            }
          } else if ((itype === 'file' && method === 'rename') || (itype === 'folder' && __indexOf.call(_fldr_ops, method) >= 0)) {
            result = data != null ? (_ref1 = data.response) != null ? _ref1[itype] : void 0 : void 0;
          } else if (itype === 'user') {
            if (method === 'login') {
              token = data.response.token;
              result = data.response;
            } else if (method === 'info') {
              result = data.response.user;
            }
          } else if (itype === 'trashcan' && method === 'content') {
            result = data != null ? (_ref2 = data.response) != null ? _ref2.files : void 0 : void 0;
          } else {
            result = data != null ? (_ref3 = data.response) != null ? _ref3.result : void 0 : void 0;
          }
          if (cb && typeof cb === 'function' && (!twolevel)) {
            return cb(null, result);
          }
        } else {
          if (cb && typeof cb === 'function') {
            return cb(new ApiError("" + (data != null ? data.status : void 0) + ": " + (data != null ? data.details : void 0)));
          }
        }
      } else if (xhr.readyState === 4 && xhr.status !== 200) {
        if (cb && typeof cb === 'function') {
          return cb(new NetworkError("" + xhr.status + ": " + status));
        }
      }
    };
    return xhr.send();
  };

  userLogin = function(login, password, cb) {
    return _item_method_helper('user', 'login', {
      login: login,
      password: password
    }, cb);
  };

  userInfo = function(cb) {
    return _item_method_helper('user', 'info', {}, cb);
  };

  fileUpload = function(name, hash, size, file, progress_cb, cb) {
    return _item_method_helper('file', 'upload', {
      name: name,
      hash: hash,
      size: size,
      file: file,
      progress_cb: progress_cb
    }, cb);
  };

  fileRename = function(file_id, name, cb) {
    var params;
    params = {
      file_id: file_id,
      name: name
    };
    return _item_method_helper('file', 'rename', params, cb);
  };

  fileDelete = function(file_id, cb) {
    var params;
    params = {
      file_id: file_id
    };
    return _item_method_helper('file', 'delete', params, cb);
  };

  fileCopy = function(file_id, folder_id_dest, cb) {
    var params;
    params = {
      file_id: file_id,
      folder_id_dest: folder_id_dest
    };
    return _item_method_helper('file', 'copy', params, cb);
  };

  fileMove = function(file_id, folder_id_dest, cb) {
    var params;
    params = {
      file_id: file_id,
      folder_id_dest: folder_id_dest
    };
    return _item_method_helper('file', 'move', params, cb);
  };

  folderInfo = function(folder_id, cb) {
    var args, params;
    params = {};
    args = Array.prototype.slice.call(arguments);
    cb = args.pop();
    if (args.length === 1) {
      params.folder_id = args.shift();
    }
    return _item_method_helper('folder', 'info', params, cb);
  };

  folderContent = function(folder_id, cb) {
    var args, params;
    params = {};
    args = Array.prototype.slice.call(arguments);
    cb = args.pop();
    if (args.length === 1) {
      params.folder_id = args.shift();
    }
    return _item_method_helper('folder', 'content', params, cb);
  };

  folderCreate = function(name, folder_id, cb) {
    var args, params;
    params = {};
    args = Array.prototype.slice.call(arguments);
    cb = args.pop();
    params.name = args.shift();
    if (args.length === 1) {
      params.folder_id = args.shift();
    }
    return _item_method_helper('folder', 'create', params, cb);
  };

  folderRename = function(folder_id, name, cb) {
    var params;
    params = {
      name: name,
      folder_id: folder_id
    };
    return _item_method_helper('folder', 'rename', params, cb);
  };

  folderDelete = function(folder_id, cb) {
    var params;
    params = {
      folder_id: folder_id
    };
    return _item_method_helper('folder', 'delete', params, cb);
  };

  folderCopy = function(folder_id, folder_id_dest, cb) {
    var params;
    params = {
      folder_id: folder_id,
      folder_id_dest: folder_id_dest
    };
    return _item_method_helper('folder', 'copy', params, cb);
  };

  folderMove = function(folder_id, folder_id_dest, cb) {
    var params;
    params = {
      folder_id: folder_id,
      folder_id_dest: folder_id_dest
    };
    return _item_method_helper('folder', 'move', params, cb);
  };

  trashcanContent = function(cb) {
    return _item_method_helper('trashcan', 'content', {}, cb);
  };

  trashcanEmpty = function(cb) {
    return _item_method_helper('trashcan', 'empty', {}, cb);
  };

  trashcanRestore = function(cb) {
    return _item_method_helper('trashcan', 'restore', {}, cb);
  };

  window.FTClient = FTClient = {
    _setToken: function(newToken) {
      return token = newToken;
    },
    _setBaseUrl: function(newBaseUrl) {
      return base_url = newBaseUrl;
    },
    ApiError: ApiError,
    NetworkError: NetworkError,
    userLogin: userLogin,
    userInfo: userInfo,
    fileUpload: fileUpload,
    fileRename: fileRename,
    fileDelete: fileDelete,
    fileMove: fileMove,
    fileCopy: fileCopy,
    folderInfo: folderInfo,
    folderContent: folderContent,
    folderCreate: folderCreate,
    folderRename: folderRename,
    folderDelete: folderDelete,
    folderCopy: folderCopy,
    folderMove: folderMove,
    trashcanContent: trashcanContent,
    trashcanEmpty: trashcanEmpty,
    trashcanRestore: trashcanRestore
  };

}).call(this);
